group_by(audio_condition) %>%
summarize(meanNov = mean(x_1, na.rm=TRUE), sdNov = sd(SD_1,na.rm=TRUE), countStudies = length(x_1))
novPrefSummary<- meta %>%
filter(audio_condition %in% c("noun","silence", "non-linguistic sound")) %>%
filter(mean_age_months > 11) %>%  # using 11 rather than 12 allows to include a few extra studeis
filter(response_mode ==  "eye-tracking") %>%
group_by(audio_condition) %>%
summarize(meanNov = mean(x_1, na.rm=TRUE), sdNov = sd(SD_1,na.rm=TRUE), countStudies = length(x_1, na.rm=TRUE))
novPrefSummary<- meta %>%
filter(audio_condition %in% c("noun","silence", "non-linguistic sound")) %>%
filter(mean_age_months > 11) %>%  # using 11 rather than 12 allows to include a few extra studeis
filter(response_mode ==  "eye-tracking") %>%
group_by(audio_condition) %>%
summarize(meanNov = mean(x_1, na.rm=TRUE), sdNov = sd(SD_1,na.rm=TRUE), countStudies = length(x_1))
novPrefSummary
mu_es_silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
subsPerGroup = 60
mu_es_labels <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
mu_es_tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones)
mu_es_silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
subsPerGroup = 60
sim_labels <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
sim_tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones)
sim_silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
sims= gather(key=condition, value = novelty, sim_labels,sim_tones,sim_silence)
? gather
subsPerGroup = 60
sim$labels <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
sim$tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones)
sim$silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
sim
sim=[]
subsPerGroup = 60
sim$labels <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
sim$tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones)
sim$silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
sim
sim$labels <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
sim <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
sims = array ()
sims
sim = array()
subsPerGroup = 60
sim$labels <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
sim$tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones)
sim$silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
sim
sims= gather(data=sim, key=condition, value = novelty, sim_labels,sim_tones,sim_silence)
sims
labels
labels <- rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels)
laberls
labels
sims <- labels %>%
mutate(condition = "labels")
sims
sims <- as.tibble(labels) %>%
mutate(condition = "labels")
sims
sims <- as.tibble(labels) %>%
mutate(condition = "labels", value = "novelty")
sims
labels <- as.tibble(rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels) )
labels
sims <- as.tibble(labels) %>%
mutate(condition = "labels") %>%
bind_rows(tones)
sims
subsPerGroup = 60
labels <- as.tibble(rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels) )
tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones)
silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
sims <- as.tibble(labels) %>%
mutate(condition = "labels") %>%
bind_rows(tones)
tones
subsPerGroup = 60
labels <- as.tibble(rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels) )
tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones)
silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence)
labels <- as.tibble(labels) %>%
mutate(condition = "labels")
tones <- as.tibble(tones) %>%
mutate(condition = "tones")
silence <- as.tibble(tones) %>%
mutate(condition = "silence")
allsims <- labels %>%
bind_rows(tones) %>%
bind_rows(silence)
allsims
write.csv(allsims, "SimulatedMeans.csv")
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(BayesFactor)
library(brms)
library(MASS)
library(tidyverse)
d
# Directories and helper code
path="analyses-prereg"
# read in simulated data
d <- read.csv(here::here(path, "SimulatedMeans.csv"))
# Directories and helper code
path="analyses-prereg"
# read in simulated data
d <- read.csv(here::here(path, "SimulatedMeans.csv"))
# Directories and helper code
path="analyses_prereg"
# read in simulated data
d <- read.csv(here::here(path, "SimulatedMeans.csv"))
d$subid = as.factor(d$subidSim)
d <- read.csv(here::here(path, "SimulatedMeans.csv"))
d
d <- read.csv(here::here(path, "SimulatedMeans.csv"))
d$subid = as.factor(d$X)
d
d$subid
d
# Directories and helper code
path="analyses_prereg"
# read in pilot data for sanity checks data
d <- read.csv(here::here(path, "labelcats-pilot-all.csv"))
# Directories and helper code
path="analyses_prereg"
# read in pilot data for sanity checks data
d <- read.csv(here::here(path, "processed_data/labelcats-pilot-all.csv"))
d$subid = as.factor(d$subidSim)
# Directories and helper code
path="analyses_prereg"
# read in pilot data for sanity checks data
d <- read.csv(here::here(path, "processed_data/labelcats-pilot-all.csv"))
d$subid = as.factor(d$subid)
## Read in .csv sheet with the SMI names for the stimuli we're going to be looking at
condOrder <- read.csv(here::here(path,"info/stimInfo.csv"))
# Get sets of codes useful for importing SMI eyetracking data
source(here::here(path,"HelperCode/et_helper_bll.R"))
## Eliminate data points where the eye-tracked failed to get accurate gaze
# 1. only get data where L/R eyes are valid
# 2. then, make those x and y's that fell on (0, 1080) as weird default be treated as NA's.
X_MAX=1920
Y_MAX=1080
d <- as.tibble(d) %>%
mutate(x = replace(x, LeyeValid==0 | d$ReyeValid==0,NA), y = replace(y, LeyeValid==0 | d$ReyeValid==0,NA)) %>%
mutate(x = ifelse(x <= 0 | x >= X_MAX | y <= 0 | y >= Y_MAX, NA, x),
y = ifelse(x <= 0 | x >= X_MAX | y <= 0 | y >= Y_MAX, NA, y))
## Join condition info with eye-tracking info
d<- d %>%
inner_join(condOrder)
## Count how many test trials recorded for each participant
testTrialCount <- d %>%
group_by(subid, TrialType) %>%
filter(TrialType =="TestTrial") %>%
dplyr::summarise(testTrialCount = length(unique(stimulus)))
# Count what proportion of the time kids were looking at test trials, compute include trial index
trialsToInclude <- d %>%
filter(TrialType %in% c("TestTrial","WordLearn","Calibration","Familiarization")) %>%
group_by(subid, StimName,TrialType) %>%
dplyr::summarise(samples = length(x), na_prop = sum(is.na(x)) / length(x)) %>%
mutate(includeTrial = (na_prop)<.5)
# Only keep subjects who have at least two silent test trials
subsToInclude <- trialsToInclude %>%
group_by(subid, TrialType) %>%
dplyr::summarize(countTrials = sum(includeTrial)) %>%
filter(TrialType == "TestTrial") %>%
mutate(includeSub = countTrials > 1) %>% # At least 2/3 test trials
filter(includeSub == TRUE)
# Don't have familiarization data in simulated dataset
# subsToInclude_FamOK <- trialsToInclude %>%
#   filter(TrialType=="Familiarization") %>%
#   group_by(subid) %>%
#   mutate(sawFamStimuli = (na_prop)<.75) %>%
#   filter(sawFamStimuli == FALSE)
## Filter trials data to include include na_prop <.50
trialsToInclude <- trialsToInclude %>%
filter(TrialType=="Calibration" || includeTrial == TRUE)
# Now filter entire dataset
d <- d %>%
filter(is.element(subid,subsToInclude$subid)) %>% # only include participants wtih enough data
# filter(is.element(subid,subsToInclude_FamOK$subid)) %>% # only include participants who saw fam trials
inner_join(trialsToInclude, by=c("subid","TrialType","StimName")) ## only include trials with enough data
# Check how many subjects we have in each condition
countSubjects <- d %>%
group_by(AuditoryCond, StimGroup) %>%
summarize(numSubjects = length(unique(subid)))
CALIB_SACCADE_TIME = .3 # time it should take for infants to saccade to the actual stimulus if they are following perfectly (300ms)
pts <- read_csv(here::here("analyses-pilot/info/ball_calib_timing.csv")) %>%
mutate(start_time = start_time.onset/1000  + CALIB_SACCADE_TIME,
end_time = end_time.onset/1000 + CALIB_SACCADE_TIME) %>%
mutate(true_x=scale(true_x,scale = (720/1920), center = FALSE)) %>% # orig movie dim / screen dim (x)
mutate(true_y=scale(true_y_cartesian,scale =(480/1080), center = FALSE)) %>% # orig movie dim / screen dim (y)
mutate(point = end_time.ordinal + 1) %>% #make an index of points from 1-5 not 0-4
dplyr::select(point, start_time, end_time, true_x, true_y)
CALIB_SACCADE_TIME = .3 # time it should take for infants to saccade to the actual stimulus if they are following perfectly (300ms)
pts <- read_csv(here::here("analyses_prereg/info/ball_calib_timing.csv")) %>%
mutate(start_time = start_time.onset/1000  + CALIB_SACCADE_TIME,
end_time = end_time.onset/1000 + CALIB_SACCADE_TIME) %>%
mutate(true_x=scale(true_x,scale = (720/1920), center = FALSE)) %>% # orig movie dim / screen dim (x)
mutate(true_y=scale(true_y_cartesian,scale =(480/1080), center = FALSE)) %>% # orig movie dim / screen dim (y)
mutate(point = end_time.ordinal + 1) %>% #make an index of points from 1-5 not 0-4
dplyr::select(point, start_time, end_time, true_x, true_y)
## get calibration data from first time
learn_data <- d %>%
filter(TrialType == "Calibration") %>%
group_by(subid) %>%
mutate(Time = t.stim - min(t.stim))  %>%
filter(!is.na(y) & !is.na(x))
## filter calibration data by the timepoints when the ball was in certain locations
calib_data <- lapply(1:nrow(pts), function (pt) {
learn_data %>%
filter(Time >= pts[pt,]$start_time,
Time <= pts[pt,]$end_time) %>%
mutate(point = pts[pt,]$point)}) %>%
bind_rows %>%
arrange(subid, Time) %>%
group_by(subid) %>%
left_join(pts)
## robust regression on true and predicted outcomes
x_models <- calib_data %>%
do(x_model = rlm(true_x ~ x, data = .))
y_models <- calib_data %>%
do(y_model = rlm(true_y ~ y, data = .))
models <- left_join(x_models,y_models) # bind x and y models
subjs <- unique(calib_data$subid) # get list of subjects
## use these robust regressions to predict new values for the recalibraiton trials
predicted_data <- lapply(subjs, function (s) {
models <- filter(models, subid == s)
filter(calib_data, subid == s) %>%
mutate(predicted_x = predict(models$x_model[[1]]),
predicted_y = predict(models$y_model[[1]]))}) %>%
bind_rows %>%
dplyr::rename(empirical_x = x, empirical_y = y) %>%
group_by(subid) %>%
gather(measure,value,empirical_x,predicted_x,empirical_y,predicted_y) %>%
separate(measure, into = c("measure", "dimension"), sep = "\\_") %>%
spread(dimension,value)
## now apply predictions to entire dataset and get out new x and y
adjusted_data <- lapply(subjs, function (s) { # for each subject in the dataset
out_data <- filter(d,subid == s)
models <- filter(models,subid == s)
out_data$x = predict(models$x_model[[1]], newdata = out_data)
out_data$y = predict(models$y_model[[1]], newdata = out_data)
return(out_data)}) %>%
bind_rows %>% # bind it all together
mutate(x = ifelse(x <= 0 | x >= X_MAX | y <= 0 | y >= Y_MAX, NA, x),
y = ifelse(x <= 0 | x >= X_MAX | y <= 0 | y >= Y_MAX, NA, y)) %>%
group_by(subid)
d.cleaned <- adjusted_data
# Rename variables for clarity
d.cleaned$SimLevelDiscrete = d.cleaned$level
d.cleaned$Participant = d.cleaned$subid
# 1. Filter data for word learning and test trials
toFilter=c('WordLearn','TestTrial')
d.cleaned <- d.cleaned %>%
filter(is.element(TrialType,toFilter))
# 2. Define the target ROIs (regions of interest)
rois <- list()
rois[[1]] <- c(0,200,768,600) # left
rois[[2]] <- c(1152,200,768,600) # right
names(rois) <- c("L","R")
roi.image(rois)
d.cleaned$roi <- roi.check(d.cleaned,rois) # calls helper function to say whether infant was looking at ROI or not
# 3. Code whether infant was looking in each ROI
d.cleaned <- d.cleaned %>%
mutate(novelty = ifelse(roi == distPos, "1", "0")) %>%
mutate(novelty = as.numeric(novelty))
# see how the distribution of ROIs looks
qplot(roi,data=d.cleaned) # mostly looking in one or the other
# Rezero trials to onset of stimuli (test trial) or to onset of label (word learning trials)
d.cleaned <- rezero.trials(d.cleaned )
simData <- read.csv(here::here(path, "simulated_data/SimulatedMeans.csv")) %>%
simData <- read.csv(here::here(path, "simulated_data/SimulatedMeans.csv")
simData <- read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))
simData
as.tibble(simData)
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
mutate(AuditoryCond = condition,meanNovelty = value, subid = X)
simData
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,meanNovelty = value, subid = X)
simData
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,meanNovelty = value, subid = as.factor(X))
simData
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,meanNovelty = value) %>%
mutate(subid = as.factor(X)) %>%
select(-X)
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,meanNovelty = value) %>%
mutate(subid = as.factor(X)) %>%
select(-X)
ssimData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,meanNovelty = value) %>%
mutate(subid = as.factor(X))
simData
# read in simulated data for analyses simulations
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,meanNovelty = value) %>%
mutate(Participant = as.factor(X))
# novPrefsByCond <- d.cleaned %>%
# filter(TrialType == "TestTrial") %>% # only one trial type right now
group_by(Participant,AuditoryCond) %>%
dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
# read in simulated data for analyses simulations
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,meanNovelty = value) %>%
mutate(Participant = as.factor(X))
# novPrefsByCond <- d.cleaned %>%
# filter(TrialType == "TestTrial") %>% # only one trial type right now
# group_by(Participant,AuditoryCond) %>%
# dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
novPrefsByCond <- simData %>%
group_by(Participant,AuditoryCond) %>%
dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
# read in simulated data for analyses simulations
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,novelty = value) %>%
mutate(Participant = as.factor(X))
# novPrefsByCond <- d.cleaned %>%
# filter(TrialType == "TestTrial") %>% # only one trial type right now
# group_by(Participant,AuditoryCond) %>%
# dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
novPrefsByCond <- simData %>%
group_by(Participant,AuditoryCond) %>%
dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
LabelsNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="labels"]
TonesNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="tones"]
MusicNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="music"]
LabelsvTones = BayesFactor::ttestBF(LabelsNovelty, TonesNovelty)
LabelsvMusic = BayesFactor::ttestBF(LabelsNovelty, MusicNovelty)
# read in simulated data for analyses simulations
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,novelty = value) %>%
mutate(Participant = as.factor(X))
# novPrefsByCond <- d.cleaned %>%
# filter(TrialType == "TestTrial") %>% # only one trial type right now
# group_by(Participant,AuditoryCond) %>%
# dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
novPrefsByCond <- simData %>%
group_by(Participant,AuditoryCond) %>%
dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
LabelsNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="labels"]
TonesNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="tones"]
MusicNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="music"]
LabelsvTones = BayesFactor::ttestBF(LabelsNovelty, TonesNovelty)
LabelsvMusic = BayesFactor::ttestBF(LabelsNovelty, MusicNovelty)
extractBF(LabelsvTones)$bf
extractBF(LabelsvMusic)$bf
# read in simulated data for analyses simulations
simData <- as.tibble(read.csv(here::here(path, "simulated_data/SimulatedMeans.csv"))) %>%
rename(AuditoryCond = condition,novelty = value) %>%
mutate(Participant = as.factor(X))
# novPrefsByCond <- d.cleaned %>%
# filter(TrialType == "TestTrial") %>% # only one trial type right now
# group_by(Participant,AuditoryCond) %>%
# dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
novPrefsByCond <- simData %>%
group_by(Participant,AuditoryCond) %>%
dplyr::summarise(meanNovelty = mean(novelty, na.rm=TRUE))
LabelsNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="labels"]
TonesNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="tones"]
MusicNovelty = novPrefsByCond$meanNovelty[novPrefsByCond$AuditoryCond=="music"]
LabelsvTones = BayesFactor::ttestBF(LabelsNovelty, TonesNovelty)
LabelsvMusic = BayesFactor::ttestBF(LabelsNovelty, MusicNovelty)
extractBF(LabelsvTones)$bf
extractBF(LabelsvMusic)$bf
LabelsvTones
LabelsNovelty
mean(LabelsNovelty)
TonesNovelty
mean(TonesNovelty)
ttestBF(LabelsNovelty, TonesNovelty)
MusicNovelty
mean(MusicNovelty)
mean(LabelsNovelty)
mean(TonesNovelty)
LabelsNovelty
LabelsNovelty
LabelsNovelty-.5
mean(LabelsNovelty-.5)
sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sdn(LabelsNovelty-.5))
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
mean(LabelsNovelty-.5)/sd(LabelsNovelty-.5)
effectSizes_Targeted
effectSizes_Targeted$meanEffect_Targeted
effectSizes_Targeted$meanEffect_Targeted[1]
effectSizes_Targeted$meanEffect_Targeted[1]
,eta
meta
meta$d_calc
plot(meta$x_1,meta$d_calc)
plot(meta$sd_1,meta$d_calc)
plot(meta$t,meta$d_calc)
meta$d_calc
plot(meta$g_calc,meta$d_calc)
plot(meta$x_1, meta$SD_1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(BayesFactor)
library(BFDA)
novPrefSummary<- meta %>%
filter(audio_condition %in% c("noun","silence", "non-linguistic sound")) %>%
filter(response_mode ==  "eye-tracking") %>%
group_by(audio_condition) %>%
summarize(meanNov = mean(x_1, na.rm=TRUE), sdNov = sd(SD_1,na.rm=TRUE), countStudies = length(x_1))
nov_mean_tones <- novPrefSummary$meanNov[1]
nov_sd_tones <- novPrefSummary$sdNov[1]
nov_mean_labels <- novPrefSummary$meanNov[2]
nov_sd_labels <- novPrefSummary$sdNov[2]
nov_mean_silence <- novPrefSummary$meanNov[3]
nov_sd_silence <- novPrefSummary$sdNov[3]
nov_sd_tones
nov_sd_labels
nov_sd_silence
novPrefSummary<- meta %>%
filter(audio_condition %in% c("noun","silence", "non-linguistic sound")) %>%
filter(response_mode ==  "eye-tracking") %>%
group_by(audio_condition)
novPrefSummary
novPrefSummary$SD_1
rnorm(30, mean = .3, sd = .3)
rnorm(30, mean = .3, sd = .05)
rnorm(30, mean = .3, sd = .05)
rnorm(30, mean = .3, sd = .05)
rnorm(30, mean = .3, sd = .3)
rnorm(30, mean = .3, sd = .3)
rnorm(30, mean = .3, sd = .3)
rnorm(30, mean = .3, sd = .3)
rnorm(30, mean = .3, sd = .3)
subsPerGroup = 60
ES <- .5
n_sims <- 100
ns <- c(20,60)
sims <- as.tibble(expand.grid(sim = 1:n_sims,
n = ns)) %>%
mutate(idx = 1:n()) %>%
split(.$idx) %>%
map_df(function (x) {
d1 <- rnorm(n = x$n)
d2 <- rnorm(n = x$n, mean = ES)
x$p <- t.test(d1, d2)$p.value
return(x)
})
labels <- as.tibble(rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels*2) )
tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones*2)
silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence*2)
labels <- as.tibble(labels) %>%
mutate(condition = "labels")
tones <- as.tibble(tones) %>%
mutate(condition = "tones")
silence <- as.tibble(tones) %>%
mutate(condition = "music")
allsims <- labels %>%
bind_rows(tones) %>%
bind_rows(silence)
write.csv(allsims, "simulated_data/SimulatedMeans.csv")
labels
labels$value
mean(labels$value)
sd(labels$value)
subsPerGroup = 60
ES <- .5
n_sims <- 100
ns <- c(20,60)
sims <- as.tibble(expand.grid(sim = 1:n_sims,
n = ns)) %>%
mutate(idx = 1:n()) %>%
split(.$idx) %>%
map_df(function (x) {
d1 <- rnorm(n = x$n)
d2 <- rnorm(n = x$n, mean = ES)
x$p <- t.test(d1, d2)$p.value
return(x)
})
labels <- as.tibble(rnorm(n = subsPerGroup, mean = nov_mean_labels, sd = nov_sd_labels*3) )
tones <- rnorm(n = subsPerGroup, mean = nov_mean_tones, sd = nov_sd_tones*3)
silence <- rnorm(n = subsPerGroup, mean = nov_mean_silence, sd = nov_sd_silence*3)
labels <- as.tibble(labels) %>%
mutate(condition = "labels")
tones <- as.tibble(tones) %>%
mutate(condition = "tones")
silence <- as.tibble(tones) %>%
mutate(condition = "music")
allsims <- labels %>%
bind_rows(tones) %>%
bind_rows(silence)
write.csv(allsims, "simulated_data/SimulatedMeans.csv")
sd(labels$value)
labels
labels$value
hist(labels$value)
? rnorm
